"use client";

import React, { useState, useEffect } from "react";
import TextEditor from "@/components/TextEditor";
import SuggestionPanel from "@/components/SuggestionPanel";
import { supabase } from "@/lib/supabase";

interface Suggestion {
  id: number;
  content: string;
  wizard_session_id: string;
  user_id: number;
  is_accepted: boolean | null;
  type: 'append' | 'comment';
  position?: number;
  end_position?: number;
  selected_text?: string;
  reaction?: 'like' | 'apply' | 'reject';
  created_at: string;
}

export default function UserPage() {
  const [text, setText] = useState<string>("");
  const [suggestion, setSuggestion] = useState<Suggestion | null>(null);
  const [sessionId, setSessionId] = useState<string>("");
  const [userName, setUserName] = useState<string>("");
  const [loading, setLoading] = useState<boolean>(false);
  const [isRegistered, setIsRegistered] = useState<boolean>(false);
  const [userId, setUserId] = useState<number | null>(null);
  const [documentId, setDocumentId] = useState<number | null>(null);
  const [suggestions, setSuggestions] = useState<Suggestion[]>([]);

  // 初始化会话
  useEffect(() => {
    // 生成唯一的会话ID
    const newSessionId = `user-${Math.random().toString(36).substring(2, 9)}`;
    setSessionId(newSessionId);

    // 检查本地存储是否有用户信息
    const storedUser = localStorage.getItem('user');
    if (storedUser) {
      try {
        const userData = JSON.parse(storedUser);
        setUserName(userData.name);
        setUserId(userData.id);
        setIsRegistered(true);

        // 获取用户的文档
        fetchUserDocument(userData.id);
      } catch (error) {
        console.error('Error parsing stored user data:', error);
        localStorage.removeItem('user');
      }
    }
  }, []);

  // 设置Supabase订阅
  useEffect(() => {
    if (!userId) return;

    // 获取所有建议
    fetchSuggestions();

    // 设置Supabase实时订阅
    const suggestionsSubscription = supabase
      .channel('suggestions-changes')
      .on('postgres_changes', {
        event: '*',
        schema: 'public',
        table: 'suggestions',
        filter: `user_id=eq.${userId}`
      }, (payload) => {
        console.log('Suggestion update:', payload);

        // 如果收到新建议或建议状态更新，刷新建议列表
        fetchSuggestions();
      })
      .subscribe();

    // 组件卸载时清理订阅
    return () => {
      suggestionsSubscription.unsubscribe();
    };
  }, [userId]);

  // 获取所有建议
  const fetchSuggestions = async () => {
    if (!userId) return;

    try {
      const { data, error } = await supabase
        .from('suggestions')
        .select('*')
        .eq('user_id', userId)
        .order('created_at', { ascending: false });

      if (error) throw error;

      if (data) {
        // 处理所有建议
        const allSuggestions = data as Suggestion[];

        // 查找是否有需要在右侧面板显示的append类型建议
        const appendSuggestion = allSuggestions.find(
          s => s.type === 'append' && s.is_accepted === null && s.reaction === undefined
        );

        if (appendSuggestion) {
          setSuggestion(appendSuggestion);
        } else {
          setSuggestion(null);
        }

        // 设置所有建议用于列表显示
        setSuggestions(allSuggestions);
      }
    } catch (error) {
      console.error('Error fetching suggestions:', error);
    }
  };

  // 获取用户文档
  const fetchUserDocument = async (uid: number) => {
    try {
      setLoading(true);

      const { data, error } = await supabase
        .from('documents')
        .select('*')
        .eq('user_id', uid)
        .order('updated_at', { ascending: false })
        .limit(1);

      if (error) throw error;

      if (data && data.length > 0) {
        setText(data[0].content || "");
        setDocumentId(data[0].id);
      } else {
        // 如果没有文档，创建一个新文档
        createNewDocument(uid);
      }
    } catch (error) {
      console.error('Error fetching document:', error);
    } finally {
      setLoading(false);
    }
  };

  // 创建新文档
  const createNewDocument = async (uid: number) => {
    try {
      const { data, error } = await supabase
        .from('documents')
        .insert([{
          content: "",
          user_id: uid
        }])
        .select();

      if (error) throw error;

      if (data && data.length > 0) {
        setDocumentId(data[0].id);
      }
    } catch (error) {
      console.error('Error creating document:', error);
    }
  };

  // 处理用户注册
  const handleRegister = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!userName.trim()) {
      alert('请输入您的名字');
      return;
    }

    setLoading(true);

    try {
      // 注册用户
      const { data, error } = await supabase
        .from('users')
        .insert([{
          name: userName,
          session_id: sessionId
        }])
        .select();

      if (error) throw error;

      if (data && data.length > 0) {
        setUserId(data[0].id);
        setIsRegistered(true);

        // 保存用户信息到本地存储
        localStorage.setItem('user', JSON.stringify({
          id: data[0].id,
          name: userName,
          session_id: sessionId
        }));

        // 创建新文档
        createNewDocument(data[0].id);
      }
    } catch (error) {
      console.error('Error registering user:', error);
      alert('注册失败，请重试');
    } finally {
      setLoading(false);
    }
  };

  // 处理文本变更
  const handleTextChange = (newText: string) => {
    setText(newText);

    // 更新文档内容
    if (documentId && userId) {
      updateDocument(newText);
    }
  };

  // 更新文档
  const updateDocument = async (content: string) => {
    try {
      const { error } = await supabase
        .from('documents')
        .update({
          content,
          updated_at: new Date().toISOString()
        })
        .eq('id', documentId);

      if (error) throw error;
    } catch (error) {
      console.error('Error updating document:', error);
    }
  };

  // 处理添加类型建议的接受
  const handleAcceptSuggestion = async (id: number) => {
    const suggestionToAccept = suggestions.find(s => s.id === id);
    if (!suggestionToAccept) return;

    try {
      // 更新建议状态
      const { error: updateError } = await supabase
        .from('suggestions')
        .update({
          is_accepted: true,
          reaction: 'apply'
        })
        .eq('id', id);

      if (updateError) throw updateError;

      // 如果是添加类型的建议，更新文本
      if (suggestionToAccept.type === 'append') {
        const newText = text + suggestionToAccept.content;
        setText(newText);
        updateDocument(newText);
      }

      // 刷新建议列表
      fetchSuggestions();
    } catch (error) {
      console.error('Error updating suggestion status:', error);
    }
  };

  // 处理部分接受
  const handlePartialAccept = async (id: number, partialText: string) => {
    const suggestionToAccept = suggestions.find(s => s.id === id);
    if (!suggestionToAccept) return;

    try {
      // 更新建议状态
      const { error: updateError } = await supabase
        .from('suggestions')
        .update({
          is_accepted: true,
          reaction: 'apply'
        })
        .eq('id', id);

      if (updateError) throw updateError;

      // 更新文本（只适用于添加类型）
      if (suggestionToAccept.type === 'append') {
        const newText = text + partialText;
        setText(newText);
        updateDocument(newText);
      }

      // 刷新建议列表
      fetchSuggestions();
    } catch (error) {
      console.error('Error updating suggestion status:', error);
    }
  };

  // 处理拒绝建议
  const handleRejectSuggestion = async (id: number) => {
    try {
      const { error } = await supabase
        .from('suggestions')
        .update({
          is_accepted: false,
          reaction: 'reject'
        })
        .eq('id', id);

      if (error) throw error;

      // 刷新建议列表
      fetchSuggestions();
    } catch (error) {
      console.error('Error rejecting suggestion:', error);
    }
  };

  // 处理建议点赞
  const handleLikeSuggestion = async (id: number) => {
    try {
      const { error } = await supabase
        .from('suggestions')
        .update({
          reaction: 'like'
        })
        .eq('id', id);

      if (error) throw error;

      // 刷新建议列表
      fetchSuggestions();
    } catch (error) {
      console.error('Error liking suggestion:', error);
    }
  };

  // 应用文本修改
  const applyTextModification = async (suggestion: Suggestion) => {
    if (!suggestion.content || suggestion.position === undefined) return;

    try {
      // 更新文本
      let newText = text;

      if (suggestion.type === 'comment' && suggestion.selected_text) {
        // 对于修改类型建议，替换选中的文本
        if (suggestion.end_position !== undefined) {
          newText = text.substring(0, suggestion.position) +
                  suggestion.content +
                  text.substring(suggestion.end_position);
        } else {
          // 如果没有结束位置，则只在位置插入内容
          newText = text.substring(0, suggestion.position) +
                  suggestion.content +
                  text.substring(suggestion.position);
        }
      }

      // 更新文本和数据库
      setText(newText);
      updateDocument(newText);

      // 更新建议状态
      const { error } = await supabase
        .from('suggestions')
        .update({
          reaction: 'apply',
          is_accepted: true
        })
        .eq('id', suggestion.id);

      if (error) throw error;

      // 刷新建议列表
      fetchSuggestions();
    } catch (error) {
      console.error('Error applying text modification:', error);
    }
  };

  // 高亮显示建议位置
  const highlightSuggestionPosition = (suggestion: Suggestion) => {
    console.log('highlightSuggestionPosition', suggestion);
    if (suggestion.position === undefined) return;

    // 找到文本编辑器元素
    const editorElement = document.querySelector('.ProseMirror');
    if (!editorElement) return;

    // 创建临时高亮样式
    const tempHighlight = document.createElement('div');
    tempHighlight.className = 'suggestion-highlight';
    tempHighlight.style.position = 'absolute';
    tempHighlight.style.backgroundColor = 'rgba(255, 217, 0, 0.3)';
    tempHighlight.style.padding = '2px 0';
    tempHighlight.style.borderRadius = '2px';
    tempHighlight.style.animation = 'pulse 1.5s 3';

    // 添加动画样式
    const style = document.createElement('style');
    style.textContent = `
      @keyframes pulse {
        0% { opacity: 0; }
        50% { opacity: 1; }
        100% { opacity: 0; }
      }
    `;
    document.head.appendChild(style);

    // 尝试定位到相应位置
    try {
      // 简化实现：滚动到编辑器
      editorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });

      // 3秒后移除高亮和样式
      setTimeout(() => {
        tempHighlight.remove();
        style.remove();
      }, 3000);
    } catch (error) {
      console.error('Error highlighting position:', error);
    }
  };

  // 登录表单
  const renderLoginForm = () => (
    <div className="flex items-center justify-center h-screen bg-gray-50">
      <div className="w-full max-w-md p-8 space-y-8 bg-white rounded-lg shadow-md">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900">开始写作</h1>
          <p className="mt-2 text-gray-600">请输入您的名字以开始写作</p>
        </div>

        <form onSubmit={handleRegister} className="mt-8 space-y-6">
          <div>
            <label htmlFor="name" className="block text-sm font-medium text-gray-700">
              您的名字
            </label>
            <div className="mt-1">
              <input
                id="name"
                name="name"
                type="text"
                required
                value={userName}
                onChange={(e) => setUserName(e.target.value)}
                className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                placeholder="请输入您的名字"
              />
            </div>
          </div>

          <div>
            <button
              type="submit"
              disabled={loading}
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              {loading ? '处理中...' : '开始写作'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );

  // 编辑器界面
  const renderEditor = () => (
    <div className="flex min-h-screen flex-col">
      <header className="p-4 bg-blue-600 text-white">
        <h1 className="text-xl font-bold">Document Editor - 欢迎, {userName}</h1>
      </header>

      <main className="flex flex-1 p-4">
        <div className="flex-1 mr-4">
          {loading ? (
            <div className="flex items-center justify-center h-full">
              <p>加载数据中...</p>
            </div>
          ) : (
            <div>
              <TextEditor
                value={text}
                onChange={handleTextChange}
              />
            </div>
          )}
        </div>

        <div className="w-96 border-l pl-4">
          <SuggestionPanel
            suggestions={suggestions}
            activeSuggestion={suggestion}
            onAccept={handleAcceptSuggestion}
            onPartialAccept={handlePartialAccept}
            onReject={handleRejectSuggestion}
            onApply={applyTextModification}
            onLike={handleLikeSuggestion}
            onRejectSuggestion={handleRejectSuggestion}
            onHighlight={highlightSuggestionPosition}
          />
        </div>
      </main>

      <footer className="p-4 bg-gray-100 text-center text-gray-500 text-sm">
        Session ID: {sessionId}
      </footer>
    </div>
  );

  return isRegistered ? renderEditor() : renderLoginForm();
}